// This is an autogenerated file from running genkit, do not edit it.
'use server';
/**
 * @fileOverview The booking request validity assessment AI agent.
 *
 * - assessRequestValidity - A function that handles the booking request validity assessment process.
 * - AssessRequestValidityInput - The input type for the assessRequestValidity function.
 * - AssessRequestValidityOutput - The return type for the assessRequestValidity function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AssessRequestValidityInputSchema = z.object({
  room: z.string().describe('The room requested.'),
  date: z.string().describe('The date requested.'),
  time: z.string().describe('The time requested.'),
  purpose: z.string().describe('The purpose of the booking.'),
  estimated_number_of_attendees: z.number().describe('The estimated number of attendees.'),
  special_requirements: z.string().describe('Any special requirements for the booking.'),
  target_email: z.string().describe('The target email for the booking.'),
  cc_email: z.string().optional().describe('The CC email for the booking, if any.'),
  requestorMail: z.string().describe('The email of the person making the request.'),
  requestorMSSV: z.string().describe('The student ID of the person making the request.'),
  requestorRole: z.string().describe('The role of the person making the request.'),
  requestorDept: z.string().describe('The department of the person making the request.'),
  CLB: z.string().describe('The club or organization making the request.'),
  requestorName: z.string().describe('The name of the person making the request.'),
});
export type AssessRequestValidityInput = z.infer<typeof AssessRequestValidityInputSchema>;

const AssessRequestValidityOutputSchema = z.object({
  isValid: z.boolean().describe('Whether the booking request is valid and complete.'),
  errors: z.array(z.string()).describe('A list of errors in the booking request, if any.'),
});
export type AssessRequestValidityOutput = z.infer<typeof AssessRequestValidityOutputSchema>;

export async function assessRequestValidity(input: AssessRequestValidityInput): Promise<AssessRequestValidityOutput> {
  return assessRequestValidityFlow(input);
}

const prompt = ai.definePrompt({
  name: 'assessRequestValidityPrompt',
  input: {schema: AssessRequestValidityInputSchema},
  output: {schema: AssessRequestValidityOutputSchema},
  prompt: `You are an AI assistant that assesses the validity and completeness of room booking requests.

  You will be provided with the details of a room booking request. Your task is to determine if the request is valid and complete.

  If the request is valid and complete, set the isValid field to true and the errors field to an empty array.

  If the request is invalid or incomplete, set the isValid field to false and the errors field to a list of errors that the user needs to correct.

  Here are the details of the room booking request:

  Room: {{{room}}}
  Date: {{{date}}}
  Time: {{{time}}}
  Purpose: {{{purpose}}}
  Estimated number of attendees: {{{estimated_number_of_attendees}}}
  Special requirements: {{{special_requirements}}}
  Target email: {{{target_email}}}
  CC email: {{{cc_email}}}
  Requestor email: {{{requestorMail}}}
  Requestor MSSV: {{{requestorMSSV}}}
  Requestor role: {{{requestorRole}}}
  Requestor department: {{{requestorDept}}}
  Club: {{{CLB}}}
  Requestor name: {{{requestorName}}}`,
});

const assessRequestValidityFlow = ai.defineFlow(
  {
    name: 'assessRequestValidityFlow',
    inputSchema: AssessRequestValidityInputSchema,
    outputSchema: AssessRequestValidityOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
