// This is an autogenerated file from running genkit, do not edit it.
'use server';
/**
 * @fileOverview Tác nhân AI đánh giá tính hợp lệ của yêu cầu đặt phòng.
 *
 * - assessRequestValidity - Một hàm xử lý quá trình đánh giá tính hợp lệ của yêu cầu đặt phòng.
 * - AssessRequestValidityInput - Kiểu đầu vào cho hàm assessRequestValidity.
 * - AssessRequestValidityOutput - Kiểu trả về cho hàm assessRequestValidity.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AssessRequestValidityInputSchema = z.object({
  room: z.string().describe('Phòng được yêu cầu.'),
  date: z.string().describe('Ngày được yêu cầu.'),
  time: z.string().describe('Thời gian được yêu cầu.'),
  purpose: z.string().describe('Mục đích của việc đặt phòng.'),
  estimated_number_of_attendees: z.number().describe('Số lượng người tham dự dự kiến.'),
  special_requirements: z.string().describe('Bất kỳ yêu cầu đặc biệt nào cho việc đặt phòng.'),
  target_email: z.string().describe('Email đích cho việc đặt phòng.'),
  cc_email: z.string().optional().describe('Email CC cho việc đặt phòng, nếu có.'),
  requestorMail: z.string().describe('Email của người thực hiện yêu cầu.'),
  requestorMSSV: z.string().describe('Mã số sinh viên của người thực hiện yêu cầu.'),
  requestorRole: z.string().describe('Vai trò của người thực hiện yêu cầu.'),
  requestorDept: z.string().describe('Khoa của người thực hiện yêu cầu.'),
  CLB: z.string().describe('Câu lạc bộ hoặc tổ chức thực hiện yêu cầu.'),
  requestorName: z.string().describe('Tên của người thực hiện yêu cầu.'),
});
export type AssessRequestValidityInput = z.infer<typeof AssessRequestValidityInputSchema>;

const AssessRequestValidityOutputSchema = z.object({
  isValid: z.boolean().describe('Liệu yêu cầu đặt phòng có hợp lệ và đầy đủ hay không.'),
  errors: z.array(z.string()).describe('Một danh sách các lỗi trong yêu cầu đặt phòng (bằng tiếng Việt), nếu có.'),
});
export type AssessRequestValidityOutput = z.infer<typeof AssessRequestValidityOutputSchema>;

export async function assessRequestValidity(input: AssessRequestValidityInput): Promise<AssessRequestValidityOutput> {
  return assessRequestValidityFlow(input);
}

const prompt = ai.definePrompt({
  name: 'assessRequestValidityPrompt',
  input: {schema: AssessRequestValidityInputSchema},
  output: {schema: AssessRequestValidityOutputSchema},
  prompt: `Bạn là một trợ lý AI đánh giá tính hợp lệ và đầy đủ của các yêu cầu đặt phòng.

  Bạn sẽ được cung cấp chi tiết của một yêu cầu đặt phòng. Nhiệm vụ của bạn là xác định xem yêu cầu đó có hợp lệ và đầy đủ hay không.

  Nếu yêu cầu hợp lệ và đầy đủ, hãy đặt trường isValid thành true và trường errors thành một mảng trống.

  Nếu yêu cầu không hợp lệ hoặc không đầy đủ, hãy đặt trường isValid thành false và trường errors thành một danh sách các lỗi (bằng tiếng Việt) mà người dùng cần sửa.

  Đây là chi tiết của yêu cầu đặt phòng:

  Phòng: {{{room}}}
  Ngày: {{{date}}}
  Thời gian: {{{time}}}
  Mục đích: {{{purpose}}}
  Số người tham dự dự kiến: {{{estimated_number_of_attendees}}}
  Yêu cầu đặc biệt: {{{special_requirements}}}
  Email đích: {{{target_email}}}
  Email CC: {{{cc_email}}}
  Email người yêu cầu: {{{requestorMail}}}
  MSSV người yêu cầu: {{{requestorMSSV}}}
  Vai trò người yêu cầu: {{{requestorRole}}}
  Khoa người yêu cầu: {{{requestorDept}}}
  Câu lạc bộ: {{{CLB}}}
  Tên người yêu cầu: {{{requestorName}}}`,
});

const assessRequestValidityFlow = ai.defineFlow(
  {
    name: 'assessRequestValidityFlow',
    inputSchema: AssessRequestValidityInputSchema,
    outputSchema: AssessRequestValidityOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

